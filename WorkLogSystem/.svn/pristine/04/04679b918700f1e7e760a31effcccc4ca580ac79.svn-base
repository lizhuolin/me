package com.poobo.task.service.impl;

import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.Criteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Service;

import com.poobo.core.entity.TblRole;
import com.poobo.core.entity.TblTask;
import com.poobo.core.enums.EnumDataStatus;
import com.poobo.core.service.impl.BaseServiceImpl;
import com.poobo.core.util.DateUtils;
import com.poobo.core.util.GetSessionData;
import com.poobo.core.util.PageController;
import com.poobo.task.dao.ITaskDao;
import com.poobo.task.enums.EnumTaskStatus;
import com.poobo.task.service.ITaskService;

@Service("taskService")
public class TaskServiceImpl extends BaseServiceImpl<TblTask> implements ITaskService{
	
	private ITaskDao taskDao;
	@Resource 
	public void setTaskDao(ITaskDao taskDao) {
		super.setBaseDao(taskDao);
		this.taskDao = taskDao;
	}
	
	
	
	
	@Override
	public PageController<TblTask> getPageList(TblTask task, int pageNow, int pageSize) {
		PageController list=new PageController<TblTask>(30, 10, 2);
		list.setPageNow(pageNow);
		Criteria criteria=taskDao.createCriteria(TblTask.class);
		criteria.add(Restrictions.ne("dataStatus", EnumDataStatus.DEL.getValue()));
		
		if(!GetSessionData.getUser().getIsUserPlatform()){
			criteria.add(Restrictions.eq("tblCompany", GetSessionData.getUser().getTblCompany()));
			}
			criteria.addOrder(Order.desc("createTime"));
		
		 if(null!=task){
			 if(StringUtils.isNotEmpty(task.getTaskMsg())){
				 criteria.add(Restrictions.like("taskMsg", task.getTaskMsg()));
			 }
		 }
		
		return taskDao.findPageByCriteria(criteria, pageNow, pageSize);
	}




	@Override
	public List<TblTask> findTaskList(TblTask task) {
		
		 Criteria   criteria =taskDao.createCriteria(TblTask.class);
		 if(null!=task){
			 if(StringUtils.isNotEmpty(task.getTaskMsg())){
				 criteria.add(Restrictions.like("taskMsg","%" +task.getTaskMsg() + "%"));
			 }
		 }
		 
		return criteria.list();
	}




	@Override
	public void newTask(TblTask tblTask) {
		/*tblTask.setDataStatus(EnumDataStatus.NORMAL.getValue());*/
		tblTask.setCreateTime(DateUtils.getCurrentDateTimeStamp());
		
		//初始化任务未开始
		/*tblTask.setDataStatus(EnumTaskStatus.N_START.getValue());*/
		
		super.save(tblTask);
		
	}




	@Override
	public void updateTask(TblTask tblTask) {
		
		TblTask oldTask=super.findObjectById(tblTask.getTaskId());
		tblTask.setCreateTime(oldTask.getCreateTime());
		tblTask.setDataStatus(oldTask.getDataStatus());
		
		//初始化任务未开始
		tblTask.setDataStatus(oldTask.getDataStatus());
		super.merge(tblTask);
		
	}




	@Override
	public void delTaskByIds(String[] idList) {
		for(String id:idList){
			TblTask tblTask=super.findObjectById(id);
			tblTask.setDataStatus(EnumDataStatus.DEL.getValue());
			//初始化任务未开始
			super.merge(tblTask);
		}
		
	}



	//任务名称查询
	@Override
	public PageController<TblTask> findTaskList(TblTask tblTask, int pageNow, int pageSize) {
		// TODO Auto-generated method stub
		Criteria criteria = taskDao.createCriteria(TblTask.class);
		criteria.add(Restrictions.eq("dataStatus", EnumDataStatus.NORMAL.getValue()));
		criteria.addOrder(Order.desc("createTime"));
		if(null != tblTask){
		  criteria.add(Restrictions.ilike("taskMsg", "%" + tblTask.getTaskMsg()+"%"));
		 // criteria.add(Restrictions.eq("isEffect",tblTask.getIsEffect()));
		}
		return taskDao.findPageByCriteria(criteria, pageNow, pageSize);
		
		
	}


	/**
	 * 根据公司id查找所有任务
	 * @return
	 */
	public List<TblTask> findTaskByCompanyId(String companyId) {
		return taskDao.findTaskByCompanyId(companyId);
	}




	@Override
	public List<TblTask> findTaskByUserId(String userId) {
		return taskDao.findTaskByUserId(userId);
	}




	@Override
	public List<TblTask> findTaskList4Mobile(TblTask tblTask, int rowIndex, int pageSize) {
		
		Criteria criteria = taskDao.createCriteria(TblTask.class);
		if(null!=tblTask){
			if(null!=tblTask.getTaskResponsible() && !StringUtils.isEmpty(tblTask.getTaskResponsible().getUserId())){
				criteria.add(Restrictions.eq("taskResponsible.userId", tblTask.getTaskResponsible().getUserId()));
				}
			if(!StringUtils.isEmpty(tblTask.getTaskMsg())){
				criteria.add(Restrictions.eq("taskMsg", tblTask.getTaskMsg()));
				System.out.println(tblTask.getTaskMsg());
			}
			
//			criteria.add(Restrictions.eq("dataStatus", EnumDataStatus.NORMAL.getValue()));
		}
		criteria.addOrder(Order.desc("createTime"));
		criteria.setFirstResult(rowIndex);
		criteria.setMaxResults(pageSize);
		return criteria.list();
	}
	
	
	
	
}
