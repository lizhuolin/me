package com.poobo.log.service.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Service;

import com.poobo.core.entity.TblLog;
import com.poobo.core.enums.EnumDataPrivilege;
import com.poobo.core.enums.EnumDataStatus;
import com.poobo.core.service.impl.BaseServiceImpl;
import com.poobo.core.util.GetSessionData;
import com.poobo.core.util.PageController;
import com.poobo.core.util.QueryHelper;
import com.poobo.log.dao.ILogDao;
import com.poobo.log.service.ILogService;

@Service("logService")
public class LogServiceImpl extends BaseServiceImpl<TblLog> implements ILogService {

	private ILogDao logDao;
	@Resource
	public void setLogDao(ILogDao logDao){
		super.setBaseDao(logDao);
		this.logDao=logDao;
	}
	/**
	 * 根据用户名查找日志
	 */
	@Override
	public PageController<TblLog> getPageListByUserid(String userId,int pageNow, int pageSize) {
		
		Criteria criteria=logDao.createCriteria(TblLog.class);
		criteria.add(Restrictions.eq("tblUser.userId", userId));
		criteria.add(Restrictions.eq("dataStatus", EnumDataStatus.NORMAL.getValue()));
		return logDao.findPageByCriteria(criteria, pageNow, pageSize);
	}
	
	@Override
	public PageController<TblLog> findLogList(TblLog tblLog, int pageNow,
			int pageSize) {
		StringBuffer sb=new StringBuffer();
		sb.append(" from TblLog where 1=1 ");
		Map<String, Object> namedParam = new HashMap<String, Object>();
		if(tblLog!=null){
			if (tblLog.getLogTime()!=null) {
				sb.append(" and logTime =:logTime");
				Date d=tblLog.getLogTime();
				namedParam.put("logTime", d);
			}if (tblLog.getTblUser()!=null&&StringUtils.isNotEmpty(tblLog.getTblUser().getName())){
				if(tblLog.getTblUser().getName().equals("%")){
					sb.append(" and tblUser.name like :ManagerName");
					namedParam.put("ManagerName","%"+ "\\%"+"%");
				}else{
					sb.append(" and tblUser.name like :ManagerName");
					namedParam.put("ManagerName","%"+ tblLog.getTblUser().getName()+"%");
				}
			}if (tblLog.getTblCompany()!=null&&StringUtils.isNotEmpty(tblLog.getTblCompany().getCompanyName())){
				if(tblLog.getTblCompany().getCompanyName().equals("%")){
					sb.append(" and tblCompany.companyName like :ManagerName");
					namedParam.put("ManagerName","%"+ "\\%"+"%");
				}else{
					sb.append(" and tblCompany.companyName like :ManagerName");
					namedParam.put("ManagerName","%"+ tblLog.getTblCompany().getCompanyName()+"%");
				}
			}
		}
		if(!GetSessionData.getUser().getIsUserPlatform()){
			sb.append(" and tblCompany.companyId=:tblCompany");
			namedParam.put("tblCompany",GetSessionData.getUser().getTblCompany().getCompanyId());
			}
		if(GetSessionData.getDataPrivilege().equals(EnumDataPrivilege.SEESELF.getValue())){
			sb.append(" and tblUser.userId=:tblUser");
			namedParam.put("tblUser",GetSessionData.getUser().getUserId());
		}
		sb.append(" and dataStatus=:dataStatus");
		namedParam.put("dataStatus", EnumDataStatus.NORMAL.getValue());
		sb.append(" order by createTime desc");
		return logDao.findPageByHql(sb.toString(), namedParam, pageNow, pageSize);
	}
	@Override
	public TblLog findlogByUserDate(String userId, Date newDate) {
		
		return logDao.findTblLogByUserDate( userId,  newDate);
	}
	@Override
	public boolean checklogTime(TblLog tblLog) {
		QueryHelper queryHelper = new QueryHelper(TblLog.class,"u");
		SimpleDateFormat format= new SimpleDateFormat("yyyy-MM-dd");
		//Date newDate=format.parse(tblLog.getLogTime().toString());
		Date today=new Date();
		if(today.getTime()<tblLog.getLogTime().getTime()){
			return false;
		}
		queryHelper.addCondition("u.logTime=?",tblLog.getLogTime());
		queryHelper.addCondition("u.tblUser.userId=?", GetSessionData.getUser().getUserId());
		queryHelper.addCondition("u.dataStatus=?",EnumDataStatus.NORMAL.getValue());
		List<TblLog> list =findObjects(queryHelper);
		if(list == null || list.size() == 0){
			return true;
		}else{
			// 排除编辑情况下，检测当前编辑的对象
			if(list.size() == 1 && tblLog.getLogId()!=null){
				if(tblLog.getLogId().equals(list.get(0).getLogId())){
					return true;
				}
			}
			return false;
		}
		
	}
	@Override
	public List<TblLog> findMonthlogListByDate(Date dStart,Date dEnd) {
		
		return logDao.findAllByHQL(dStart, dEnd);
	}
	
	

}
