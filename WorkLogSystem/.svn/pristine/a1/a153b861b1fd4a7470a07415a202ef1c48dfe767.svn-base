package com.poobo.core.action;

import java.io.File;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import com.poobo.api.base.BaseAction;
import com.poobo.api.dto.base.ReturnBean;
import com.poobo.api.enums.EnumResultCode;
import com.poobo.api.enums.EnumUserType;
import com.poobo.api.util.common.SystemConf;

/**
 * 版本控制类
 * @author lei.ma 2015年10月22日 下午12:01:52
 *
 */
@Controller
@RequestMapping("/version/{userType}")
public class VersionAction extends BaseAction {

	/**
	 * 安卓版本更新
	 * @author lei.ma 2015年10月22日 上午11:56:09 
	 * @param userType
	 * @return
	 */
	@RequestMapping("/android/check")
	public ReturnBean checkVersion4Android(@PathVariable String userType ) {
		returnBean = new ReturnBean();
		String appVersion = "";
		String fileUrl="";
		boolean flag=false;
		switch (EnumUserType.setValue(userType)) {
		case customer:
			appVersion = SystemConf.getAppAndroidConsumerVersion();
			fileUrl=SystemConf.getAppAndroidConsumerVersionUrl();
			flag=true;
			break;
		case merchant:
			appVersion = SystemConf.getAppAndroidStoreVersion();
			fileUrl=SystemConf.getAppAndroidStoreVersionUrl();
			flag=true;
			break;
		case channelmerchant:
			appVersion = SystemConf.getAppAndroidStoreVersion();
			fileUrl=SystemConf.getAppAndroidStoreVersionUrl();
			flag=true;
			break;

		default:
			break;
		}
		
		if(flag){
			log.info("app update rootPath:" + appVersion);
			File[] fileList = orderByDate(appVersion);
			Map<String, Object> resultData = new HashMap<String, Object>();
			if (null != fileList && fileList.length > 0) {
				String fileName=fileList[fileList.length - 1].getName();
				
				resultData.put("fileUrl", fileUrl
						+ fileList[fileList.length - 1].getName());
				fileName=fileName.substring(0,fileName.lastIndexOf("."));
				resultData.put("fileName", fileName);
			}
			returnBean.setResultData(resultData);
		}else{
			returnBean.setResultCode(EnumResultCode.FAIL.name());
			returnBean.setResultMsg("请检查请求连接或参数");
		}
		return returnBean;
	}

	@RequestMapping("/ios/check")
	public ReturnBean checkVersion4Ios(@PathVariable String userType ) {
		returnBean = new ReturnBean();
		String appVersion = "";
		String fileUrl="";
		boolean flag=false;
		switch (EnumUserType.setValue(userType)) {
		case customer:
			appVersion = SystemConf.getAppIosConsumerVersion();
			fileUrl=SystemConf.getAppIosConsumerVersionUrl();
			flag=true;
			break;
		case merchant:
			appVersion = SystemConf.getAppIosStoreVersion();
			fileUrl=SystemConf.getAppIosStoreVersionUrl();
			flag=true;
			break;
		case channelmerchant:
			appVersion = SystemConf.getAppIosStoreVersion();
			fileUrl=SystemConf.getAppIosStoreVersionUrl();
			flag=true;
			break;

		default:
			break;
		}
		
		if(flag){
			log.info("app update rootPath:" + appVersion);
			File[] fileList = orderByDate(appVersion);
			Map<String, Object> resultData = new HashMap<String, Object>();
			if (null != fileList && fileList.length > 0) {
				String fileName=fileList[fileList.length - 1].getName();
				fileName=fileName.substring(0,fileName.lastIndexOf("."));
				resultData.put("fileName", fileName);
				resultData.put("fileUrl", fileUrl);
			}
			returnBean.setResultData(resultData);
		}else{
			returnBean.setResultCode(EnumResultCode.FAIL.name());
			returnBean.setResultMsg("请检查请求连接或参数");
		}
		return returnBean;
	}

	public static File[] orderByDate(String fliePath) {
		File file = new File(fliePath);
		File[] fs = file.listFiles();

		if (null == fs || fs.length == 0) {
			return null;
		}
		Arrays.sort(fs, new Comparator<File>() {
			public int compare(File f1, File f2) {
				long diff = f1.lastModified() - f2.lastModified();
				if (diff > 0)
					return 1;
				else if (diff == 0)
					return 0;
				else
					return -1;
			}

			public boolean equals(Object obj) {
				return true;
			}

		});

		return fs;

	}

}
