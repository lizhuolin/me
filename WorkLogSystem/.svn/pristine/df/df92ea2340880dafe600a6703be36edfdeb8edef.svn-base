package com.poobo.log.action;

import java.io.File;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import javax.annotation.Resource;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.struts2.ServletActionContext;

import com.poobo.changelog.service.IChangelogService;
import com.poobo.core.action.BaseAction;
import com.poobo.core.entity.TblCompany;
import com.poobo.core.entity.TblLog;
import com.poobo.core.entity.TblLogDetail;
import com.poobo.core.entity.TblProject;
import com.poobo.core.entity.TblTask;
import com.poobo.core.entity.TblUser;
import com.poobo.core.entity.TblUserProject;
import com.poobo.core.entity.TblUserProjectId;
import com.poobo.core.enums.EnumDataStatus;
import com.poobo.core.util.GetSessionData;
import com.poobo.core.util.ResultData;
import com.poobo.log.service.ILogDetailsService;
import com.poobo.log.service.ILogService;
import com.poobo.project.service.IProjectService;
import com.poobo.task.service.ITaskService;


public class LogAction extends BaseAction{
	
	@Resource
	private ILogService logService;
	@Resource
	private IProjectService projectService;
	@Resource
	private ITaskService taskService;
	@Resource
	private ILogDetailsService logDetailsService;
	@Resource
	private IChangelogService changelogService;
	private List<TblLog> logList;
	private List<TblTask>taskList;
	private List<TblProject> projectList;
	private List<TblLogDetail> logDetailList,tasklogDetailList;
	private List<TblUserProject> userProjectList;
	private TblLogDetail logDetail;
	private TblLog tblLog;
	private String ids;
	private TblUser user;
	private ResultData resultData;
	private File image;
	private String imageContentType;
	private String imageFileName;
	private String date;
    private String message = "你已成功上传文件";
    private String imagePath;
	
    /**
     * 手机端根据日期查询日志
     * @throws ParseException 
     */
    public String ajaxLog4mobile() throws ParseException{
    	if(date!=null){
    		//String[]  idList=date.split("-");
    		//int year=Integer.parseInt(idList[0]);
    		//int month=Integer.parseInt(idList[1]);
    		//int day=Integer.parseInt(idList[2]);
    		SimpleDateFormat format= new SimpleDateFormat("yyyy-MM-dd");
			Date newDate=format.parse(date);
    		TblUser user=GetSessionData.getUser();
    		tblLog= logService.findlogByUserDate(user.getUserId(),newDate);
    		if(tblLog==null){
    			return "null";
    		}
    		logDetailList=logDetailsService.findAllByLogId(tblLog.getLogId());
    	}
    	
    	return "ajaxLog4mobile";
    }
    
    
    /**
	 * 个人日志列表
	 * @return
	 */
	public String logList(){
		pageList=logService.findLogList(tblLog, pageNow, pageSize);
		return "logList";
	}
	
	/**
	 * 个人日志编辑
	 * @return
	 */
	public String logEdit(){
		projectList=new ArrayList<TblProject>();
		logDetailList=new ArrayList<TblLogDetail>();
		if(tblLog!=null && !StringUtils.isEmpty(tblLog.getLogId())){
			tblLog=logService.findObjectById(tblLog.getLogId());
		}
		user=GetSessionData.getUser();
		userProjectList=projectService.findUserProjectByUser(user.getUserId());
		taskList=taskService.findTaskByUserId(user.getUserId());		
		for(TblUserProject userProject:userProjectList){
			TblProject project= userProject.getId().getTblProject();
			project=projectService.findObjectById(project.getProjectId());
			if(project.getDataStatus()==1 && project.getProjectStatus()==1)
			projectList.add(project);
		}
		return"logEdit";
	}
	/**
	 * 编辑
	 * @return
	 */
	public String edit(){
		resultData = new ResultData();
		if(tblLog !=null && StringUtils.isEmpty(tblLog.getLogId()))
		{
			tblLog.setDataStatus(EnumDataStatus.NORMAL.getValue());
			user=GetSessionData.getUser();
			TblCompany company=user.getTblCompany();
			tblLog.setTblUser(user);
			tblLog.setTblCompany(company);
			Timestamp d = new Timestamp(System.currentTimeMillis()); 
			tblLog.setCreateTime(d);
			int comTime=0;
			if(logDetailList!=null){
				for(int i=0;i<logDetailList.size();i++){
					TblLogDetail logDetail=logDetailList.get(i);
					if(logDetail.getLogTime()!=0){
					comTime+=logDetail.getLogTime();
					}
				}
			}
			if(tasklogDetailList!=null){
				for(int i=0;i<tasklogDetailList.size();i++){
					TblLogDetail logDetail=tasklogDetailList.get(i);
					if(logDetail.getLogTime()!=0){
						comTime+=logDetail.getLogTime();
					}
				}
			}
			tblLog.setComTime(comTime);
			logService.save(tblLog);
			if(logDetailList!=null){
				for(int i=0;i<logDetailList.size();i++){
					TblLogDetail logDetail=logDetailList.get(i);
					logDetail.setTblLog(tblLog);
					if(logDetail.getLogTime()!=0){
					logDetailsService.save(logDetail);
					}
				}
			}
			
			if(tasklogDetailList!=null){
				for(int i=0;i<tasklogDetailList.size();i++){
					TblLogDetail logDetail=tasklogDetailList.get(i);
					logDetail.setTblLog(tblLog);
					if(logDetail.getLogTime()!=0){
						logDetailsService.save(logDetail);
					}
				}
			}
			changelogService.logRemable(tblLog.getLogTime().toString(), 0, "个人日志");
		}
		
		resultData.setResultFlag(true);
		return SUCCESS;
	}
	/**
	 * 删除日志
	 */
	public String delete(){
		resultData=new ResultData();
		if(ids!=null)
		{
			//获取用户id
			String[]  idList=ids.split("@");
			for(int i=0;i<idList.length;i++)
			{
				String id=idList[i];
				TblLog log=logService.findObjectById(id);
				log.setDataStatus(EnumDataStatus.DEL.getValue());
				List <TblLogDetail> logDetailList=logDetailsService.findAllByLogId(log.getLogId());
				for(TblLogDetail ld:logDetailList){
					logDetailsService.delete(ld.getLogDetailId());
				}
				logService.delete(log);
				changelogService.logRemable(log.getLogTime().toString(), 2, "个人日志");
			}
		}
		resultData.setResultFlag(true);
		return SUCCESS;
	}
	/**
	 * 手机端日志页面
	 * @return
	 */
	public String log(){
		projectList=new ArrayList<TblProject>();
		logDetailList=new ArrayList<TblLogDetail>();
		if(tblLog!=null && !StringUtils.isEmpty(tblLog.getLogId())){
			tblLog=logService.findObjectById(tblLog.getLogId());
		}
		user=GetSessionData.getUser();
		userProjectList=projectService.findUserProjectByUser(user.getUserId());
		taskList=taskService.findTaskByUserId(user.getUserId());
		for(TblUserProject userProject:userProjectList){
			TblProject project= userProject.getId().getTblProject();
			project=projectService.findObjectById(project.getProjectId());
			if(project.getDataStatus()==1 && project.getProjectStatus()==1)
			projectList.add(project);
		}
		return "log";
	}
	/**
	 * 手机端编辑日志
	 */
	public String mobileEdit(){
		resultData = new  ResultData();
		if(tblLog != null){
			if(StringUtils.isEmpty(tblLog.getLogId())){
				tblLog.setDataStatus(EnumDataStatus.NORMAL.getValue());
				user=GetSessionData.getUser();
				TblCompany company=user.getTblCompany();
				tblLog.setTblUser(user);
				tblLog.setTblCompany(company);
				Timestamp d = new Timestamp(System.currentTimeMillis());
				tblLog.setCreateTime(d);
				java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
				tblLog.setLogTime(currentDate);
				int comTime=0;
				if(logDetailList!=null){
					for(int i=0;i<logDetailList.size();i++){
						TblLogDetail logDetail=logDetailList.get(i);
						if(logDetail.getLogTime()!=0){
						comTime+=logDetail.getLogTime();
						}
					}
				}
				if(tasklogDetailList!=null){
					for(int i=0;i<tasklogDetailList.size();i++){
						TblLogDetail logDetail=tasklogDetailList.get(i);
						if(logDetail.getLogTime()!=0){
							comTime+=logDetail.getLogTime();
						}
					}
				}
				tblLog.setComTime(comTime);
				logService.save(tblLog);
				if(logDetailList!=null){
					for(int i=0;i<logDetailList.size();i++){
						TblLogDetail logDetail=logDetailList.get(i);
						logDetail.setTblLog(tblLog);
						if(logDetail.getLogTime()!=0){
						logDetailsService.save(logDetail);
						}
					}
				}
				
				if(tasklogDetailList!=null){
					for(int i=0;i<tasklogDetailList.size();i++){
						TblLogDetail logDetail=tasklogDetailList.get(i);
						logDetail.setTblLog(tblLog);
						if(logDetail.getLogTime()!=0){
							logDetailsService.save(logDetail);
						}
					}
				}
				changelogService.logRemable(tblLog.getLogTime().toString(), 0, "个人日志");
		}else {
			logService.update(tblLog);
			
		}
			resultData.setResultFlag(true);
		}
		return SUCCESS;
	}
	/**
	 * 上传图片
	 * @author hao.wang 2016年3月31日15:31:58
	 * @return
	 * @throws Exception
	 */
	  public String imageUpload() throws Exception {
		  try {
			if(image != null){
				//获取保存路径的绝对地址/WorkLogSystem/WebRoot/upload/company
				String filePath = ServletActionContext.getServletContext().getRealPath("/upload/log");
				String fileName = UUID.randomUUID().toString().replaceAll("-", "") + imageFileName.substring(imageFileName.lastIndexOf("."));
				imagePath = "upload/log/" + fileName;
				//复制文件
				FileUtils.copyFile(image, new File(filePath, fileName));
			}else{
				  message="请选择文件!";
	                return ERROR;
			}
		  }catch (Exception e) {
	            e.printStackTrace();
	            message = "对不起,文件上传失败了!!!!";
		  }
	        return SUCCESS;
	    }
    
	
	public List<TblLog> getLogList() {
		return logList;
	}
	public void setLogList(List<TblLog> logList) {
		this.logList = logList;
	}
	public TblLog getTblLog() {
		return tblLog;
	}
	public void setTblLog(TblLog tblLog) {
		this.tblLog = tblLog;
	}
	public String getIds() {
		return ids;
	}
	public void setIds(String ids) {
		this.ids = ids;
	}
	public TblUser getUser() {
		return user;
	}
	public void setUser(TblUser user) {
		this.user = user;
	}


	public List<TblTask> getTaskList() {
		return taskList;
	}


	public void setTaskList(List<TblTask> taskList) {
		this.taskList = taskList;
	}


	public List<TblProject> getProjectList() {
		return projectList;
	}


	public void setProjectList(List<TblProject> projectList) {
		this.projectList = projectList;
	}


	public TblLogDetail getLogDetail() {
		return logDetail;
	}


	public void setLogDetail(TblLogDetail logDetail) {
		this.logDetail = logDetail;
	}

	public List<TblLogDetail> getLogDetailList() {
		return logDetailList;
	}

	public void setLogDetailList(List<TblLogDetail> logDetailList) {
		this.logDetailList = logDetailList;
	}

	public ResultData getResultData() {
		return resultData;
	}

	public void setResultData(ResultData resultData) {
		this.resultData = resultData;
	}

	public List<TblLogDetail> getTasklogDetailList() {
		return tasklogDetailList;
	}

	public void setTasklogDetailList(List<TblLogDetail> tasklogDetailList) {
		this.tasklogDetailList = tasklogDetailList;
	}

	public File getImage() {
		return image;
	}

	public void setImage(File image) {
		this.image = image;
	}

	public String getImageContentType() {
		return imageContentType;
	}

	public void setImageContentType(String imageContentType) {
		this.imageContentType = imageContentType;
	}

	public String getImageFileName() {
		return imageFileName;
	}

	public void setImageFileName(String imageFileName) {
		this.imageFileName = imageFileName;
	}

	public String getImagePath() {
		return imagePath;
	}

	public void setImagePath(String imagePath) {
		this.imagePath = imagePath;
	}

	public String getDate() {
		return date;
	}

	public void setDate(String date) {
		this.date = date;
	}
	
	
}
